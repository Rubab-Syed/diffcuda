cmake_minimum_required(VERSION 3.5)
project(diffcuda)
find_package(OpenMP REQUIRED)
find_package(CUDA QUIET REQUIRED)
find_package(PythonLibs 3 REQUIRED)

#set(CMAKE_VERBOSE_MAKEFILE on)
set(EXTRA_CXX_FLAGS "-march=native -Wall -Werror -std=c++11 -fconstexpr-depth=4100 ${OpenMP_CXX_FLAGS}")
set(CMAKE_CXX_FLAGS "${CMAKE_CXX_FLAGS} ${EXTRA_CXX_FLAGS}")
set(CMAKE_C_FLAGS "${CMAKE_C_FLAGS} -std=c99 -Wall -Wextra -Wcast-qual -Wcast-align -Wshadow -Wstrict-aliasing=1 -Wswitch-enum -Wdeclaration-after-statement -Wstrict-prototypes -Wundef -pedantic")
set(SOURCE_FILES diffcuda.cpp diffcuda.h python.cpp kernel.cu xxhash.c xxhash.h)
if (CMAKE_BUILD_TYPE STREQUAL "Debug")
  set(NVCC_FLAGS "-G -g")
endif()
set(CUDA_PROPAGATE_HOST_FLAGS OFF)
string(REGEX REPLACE "-fconstexpr-depth=[0-9]+" "" SAFE_NVCC_CXX_FLAGS ${EXTRA_CXX_FLAGS})
string(REGEX REPLACE "-std=[^ ]+" "" SAFE_NVCC_CXX_FLAGS ${SAFE_NVCC_CXX_FLAGS})
string(REGEX REPLACE " +" "\",\"" SAFE_NVCC_CXX_FLAGS ${SAFE_NVCC_CXX_FLAGS})
set(SAFE_NVCC_CXX_FLAGS "-std c++11 -Xcompiler ,\"${SAFE_NVCC_CXX_FLAGS}\"")
set(NVCC_FLAGS "${NVCC_FLAGS} ${SAFE_NVCC_CXX_FLAGS} -D_MWAITXINTRIN_H_INCLUDED -D_FORCE_INLINES")
CUDA_ADD_LIBRARY(diffcuda SHARED ${SOURCE_FILES} OPTIONS -arch sm_52 ${NVCC_FLAGS})
CUDA_ADD_EXECUTABLE(benchmark ${diffcuda} benchmark.cpp OPTIONS -arch sm_52 ${NVCC_FLAGS})
TARGET_LINK_LIBRARIES(benchmark diffcuda)
if(PYTHONLIBS_FOUND)
  include_directories(${PYTHON_INCLUDE_DIRS})
  target_link_libraries(diffcuda ${PYTHON_LIBRARIES})
endif()